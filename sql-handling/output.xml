<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.2.1 (Python 3.8.5 on darwin)" generated="20210510 13:13:51.017" rpa="false">
<suite id="s1" name="Tests" source="/Users/qubilearnd/Work/qubilea-sadinmaki/robot-framework-remote-library-demo/sql-handling/tests">
<suite id="s1-s1" name="Test" source="/Users/qubilearnd/Work/qubilea-sadinmaki/robot-framework-remote-library-demo/sql-handling/tests/test.robot">
<kw name="Connect To Database" library="RemoteDatabaseLibrary" type="setup">
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using `dbName`, `dbUsername`, and `dbPassword`.</doc>
<arguments>
<arg>pymysql</arg>
<arg>${DBName}</arg>
<arg>${DBUser}</arg>
<arg>${DBPass}</arg>
<arg>${DBHost}</arg>
<arg>${DBPort}</arg>
</arguments>
<status status="PASS" starttime="20210510 13:13:51.587" endtime="20210510 13:13:51.622"></status>
</kw>
<test id="s1-s1-t1" name="Create person table">
<kw name="Execute Sql String" library="RemoteDatabaseLibrary">
<doc>Executes the sqlString as SQL commands. Useful to pass arguments to your sql. Set optional input `sansTran` to
True to run command without an explicit transaction commit or rollback.</doc>
<arguments>
<arg>CREATE TABLE person (id integer unique,first_name varchar(20),last_name varchar(20))</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20210510 13:13:51.725" level="INFO">${output} = </msg>
<status status="PASS" starttime="20210510 13:13:51.624" endtime="20210510 13:13:51.725"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20210510 13:13:51.727" level="INFO"></msg>
<status status="PASS" starttime="20210510 13:13:51.726" endtime="20210510 13:13:51.727"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${output}</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" starttime="20210510 13:13:51.730" endtime="20210510 13:13:51.731"></status>
</kw>
<tags>
<tag>db</tag>
<tag>smoke</tag>
</tags>
<status status="PASS" starttime="20210510 13:13:51.622" endtime="20210510 13:13:51.734" critical="yes"></status>
</test>
<test id="s1-s1-t2" name="Table Must Exist - person">
<kw name="Table Must Exist" library="RemoteDatabaseLibrary">
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<arguments>
<arg>person</arg>
</arguments>
<status status="PASS" starttime="20210510 13:13:51.741" endtime="20210510 13:13:51.762"></status>
</kw>
<tags>
<tag>db</tag>
<tag>smoke</tag>
</tags>
<status status="PASS" starttime="20210510 13:13:51.737" endtime="20210510 13:13:51.764" critical="yes"></status>
</test>
<test id="s1-s1-t3" name="Insert Data Into Table person">
<kw name="Execute Sql String" library="RemoteDatabaseLibrary">
<doc>Executes the sqlString as SQL commands. Useful to pass arguments to your sql. Set optional input `sansTran` to
True to run command without an explicit transaction commit or rollback.</doc>
<arguments>
<arg>INSERT INTO person VALUES(1,'Joe','Doe');</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20210510 13:13:51.804" level="INFO">${output} = </msg>
<status status="PASS" starttime="20210510 13:13:51.775" endtime="20210510 13:13:51.805"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20210510 13:13:51.808" level="INFO"></msg>
<status status="PASS" starttime="20210510 13:13:51.805" endtime="20210510 13:13:51.808"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${output}</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" starttime="20210510 13:13:51.810" endtime="20210510 13:13:51.811"></status>
</kw>
<tags>
<tag>db</tag>
<tag>smoke</tag>
</tags>
<status status="PASS" starttime="20210510 13:13:51.770" endtime="20210510 13:13:51.813" critical="yes"></status>
</test>
<test id="s1-s1-t4" name="Verify Query - Row Count person table">
<kw name="Query" library="RemoteDatabaseLibrary">
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<arguments>
<arg>SELECT COUNT(*) FROM person;</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20210510 13:13:51.839" level="INFO">${output} = [[1]]</msg>
<status status="PASS" starttime="20210510 13:13:51.818" endtime="20210510 13:13:51.839"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20210510 13:13:51.841" level="INFO">[[1]]</msg>
<status status="PASS" starttime="20210510 13:13:51.840" endtime="20210510 13:13:51.841"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${output}</arg>
<arg>[[1]]</arg>
</arguments>
<msg timestamp="20210510 13:13:51.842" level="INFO">Argument types are:
&lt;class 'list'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20210510 13:13:51.841" endtime="20210510 13:13:51.842"></status>
</kw>
<tags>
<tag>db</tag>
<tag>smoke</tag>
</tags>
<status status="PASS" starttime="20210510 13:13:51.816" endtime="20210510 13:13:51.842" critical="yes"></status>
</test>
<test id="s1-s1-t5" name="Verify Replace Data From Table - person">
<kw name="Execute Sql String" library="RemoteDatabaseLibrary">
<doc>Executes the sqlString as SQL commands. Useful to pass arguments to your sql. Set optional input `sansTran` to
True to run command without an explicit transaction commit or rollback.</doc>
<arguments>
<arg>REPLACE INTO person VALUES(1,'John','Doe');</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20210510 13:13:51.881" level="INFO">${output} = </msg>
<status status="PASS" starttime="20210510 13:13:51.845" endtime="20210510 13:13:51.882"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20210510 13:13:51.883" level="INFO"></msg>
<status status="PASS" starttime="20210510 13:13:51.882" endtime="20210510 13:13:51.883"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${output}</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" starttime="20210510 13:13:51.883" endtime="20210510 13:13:51.884"></status>
</kw>
<kw name="Check If Exists In Database" library="RemoteDatabaseLibrary">
<doc>Check if any row would be returned by given the input `selectStatement`. If there are no results, then this will
throw an AssertionError. Set optional input `sansTran` to True to run command without an explicit transaction
commit or rollback.</doc>
<arguments>
<arg>SELECT first_name, last_name FROM person WHERE last_name = 'Doe' AND first_name = 'John';</arg>
</arguments>
<status status="PASS" starttime="20210510 13:13:51.884" endtime="20210510 13:13:51.905"></status>
</kw>
<tags>
<tag>db</tag>
<tag>smoke</tag>
</tags>
<status status="PASS" starttime="20210510 13:13:51.843" endtime="20210510 13:13:51.905" critical="yes"></status>
</test>
<test id="s1-s1-t6" name="Verify Delete All Rows From Table - person">
<kw name="Delete All Rows From Table" library="RemoteDatabaseLibrary">
<doc>Delete all the rows within a given table. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<arguments>
<arg>person</arg>
</arguments>
<status status="PASS" starttime="20210510 13:13:51.907" endtime="20210510 13:13:51.947"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2</arg>
<arg>reason=None</arg>
</arguments>
<msg timestamp="20210510 13:13:53.950" level="INFO">Slept 2 seconds</msg>
<status status="PASS" starttime="20210510 13:13:51.949" endtime="20210510 13:13:53.950"></status>
</kw>
<kw name="Query" library="RemoteDatabaseLibrary">
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<arguments>
<arg>SELECT COUNT(*) FROM person;</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20210510 13:13:53.970" level="INFO">${output} = [[0]]</msg>
<status status="PASS" starttime="20210510 13:13:53.951" endtime="20210510 13:13:53.970"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20210510 13:13:53.971" level="INFO">[[0]]</msg>
<status status="PASS" starttime="20210510 13:13:53.970" endtime="20210510 13:13:53.971"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${output}</arg>
<arg>[[0]]</arg>
</arguments>
<msg timestamp="20210510 13:13:53.971" level="INFO">Argument types are:
&lt;class 'list'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20210510 13:13:53.971" endtime="20210510 13:13:53.972"></status>
</kw>
<tags>
<tag>db</tag>
<tag>smoke</tag>
</tags>
<status status="PASS" starttime="20210510 13:13:51.906" endtime="20210510 13:13:53.972" critical="yes"></status>
</test>
<test id="s1-s1-t7" name="Drop person table">
<kw name="Execute Sql String" library="RemoteDatabaseLibrary">
<doc>Executes the sqlString as SQL commands. Useful to pass arguments to your sql. Set optional input `sansTran` to
True to run command without an explicit transaction commit or rollback.</doc>
<arguments>
<arg>DROP TABLE person</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20210510 13:13:54.043" level="INFO">${output} = </msg>
<status status="PASS" starttime="20210510 13:13:53.973" endtime="20210510 13:13:54.043"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20210510 13:13:54.045" level="INFO"></msg>
<status status="PASS" starttime="20210510 13:13:54.044" endtime="20210510 13:13:54.045"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${output}</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" starttime="20210510 13:13:54.045" endtime="20210510 13:13:54.045"></status>
</kw>
<tags>
<tag>db</tag>
<tag>smoke</tag>
</tags>
<status status="PASS" starttime="20210510 13:13:53.973" endtime="20210510 13:13:54.045" critical="yes"></status>
</test>
<kw name="Disconnect From Database" library="RemoteDatabaseLibrary" type="teardown">
<doc>Disconnects from the database.</doc>
<status status="PASS" starttime="20210510 13:13:54.046" endtime="20210510 13:13:54.064"></status>
</kw>
<status status="PASS" starttime="20210510 13:13:51.056" endtime="20210510 13:13:54.064"></status>
</suite>
<status status="PASS" starttime="20210510 13:13:51.020" endtime="20210510 13:13:54.071"></status>
</suite>
<statistics>
<total>
<stat pass="7" fail="0">Critical Tests</stat>
<stat pass="7" fail="0">All Tests</stat>
</total>
<tag>
<stat pass="7" fail="0">db</stat>
<stat pass="7" fail="0">smoke</stat>
</tag>
<suite>
<stat pass="7" fail="0" id="s1" name="Tests">Tests</stat>
<stat pass="7" fail="0" id="s1-s1" name="Test">Tests.Test</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
